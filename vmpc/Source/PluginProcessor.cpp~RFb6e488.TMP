/*
  ==============================================================================

    This file was auto-generated!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

#include <audiomidi/AudioMidiServices.hpp>
#include <audio/server/RtAudioServer.hpp>

//==============================================================================
VmpcAudioProcessor::VmpcAudioProcessor()
#ifndef JucePlugin_PreferredChannelConfigurations
     : AudioProcessor (BusesProperties()
                     #if ! JucePlugin_IsMidiEffect
                      #if ! JucePlugin_IsSynth
                       .withInput  ("Input",  AudioChannelSet::stereo(), true)
                      #endif
                       .withOutput ("Output", AudioChannelSet::stereo(), true)
                     #endif
                       )
#endif
{
	mpc = new mpc::Mpc();
	mpc->init("rtaudio");
}

VmpcAudioProcessor::~VmpcAudioProcessor()
{
	delete mpc;
}

//==============================================================================
const String VmpcAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool VmpcAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool VmpcAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool VmpcAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double VmpcAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int VmpcAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int VmpcAudioProcessor::getCurrentProgram()
{
    return 0;
}

void VmpcAudioProcessor::setCurrentProgram (int index)
{
}

const String VmpcAudioProcessor::getProgramName (int index)
{
    return {};
}

void VmpcAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void VmpcAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void VmpcAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool VmpcAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    if (layouts.getMainOutputChannelSet() != AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void VmpcAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    ScopedNoDenormals noDenormals;
    const int totalNumInputChannels  = getTotalNumInputChannels();
    const int totalNumOutputChannels = getTotalNumOutputChannels();

    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // This is here to avoid people getting screaming feedback
    // when they first compile a plugin, but obviously you don't need to keep
    // this code if your algorithm always overwrites all the output channels.
    for (int i = totalNumInputChannels; i < totalNumOutputChannels; ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

	auto server = mpc->getAudioMidiServices().lock()->getRtAudioServer();
	auto sr = getSampleRate();
	if (sr != 44100.0) {
		auto ratio = 44100.0 / sr;
		auto numSamples = (int) (ceil) (buffer.getNumSamples() * ratio) - ipBufferOutL.size();
		
		std::vector<float> outputL(numSamples);
		std::vector<float> outputR(numSamples);
		std::vector<float*> pairOut{ &outputL[0], &outputR[0] };

		std::vector<float> destInL(numSamples);
		std::vector<float> destInR(numSamples);
		std::vector<float*> pairIn{ &destInL[0], &destInR[0] };

		auto inputL = buffer.getReadPointer(0);
		auto inputR = buffer.getReadPointer(1);
		auto res = inputInterpolatorL.process(ratio, inputL, &destInL[0], buffer.getNumSamples());
		inputInterpolatorR.process(ratio, inputR, &destInR[0], buffer.getNumSamples());

		if (ipBufferInL.size() != 0) {
			destInL.insert(destInL.begin(), ipBufferInL.begin(), ipBufferInL.end());
			destInR.insert(destInR.begin(), ipBufferInR.begin(), ipBufferInR.end());
			ipBufferInL.clear();
			ipBufferInR.clear();
		}

		server->work(&pairIn[0], &pairOut[0], numSamples, totalNumInputChannels, totalNumOutputChannels);

		if (ipBufferOutL.size() != 0) {
			outputL.insert(outputL.begin(), ipBufferOutL.begin(), ipBufferOutL.end());
			outputR.insert(outputR.begin(), ipBufferOutR.begin(), ipBufferOutR.end());
			numSamples += ipBufferOutL.size();
			ipBufferOutL.clear();
			ipBufferOutR.clear();
		}

		auto destOutL = buffer.getWritePointer(0);
		auto destOutR = buffer.getWritePointer(1);
		res = outputInterpolatorL.process(ratio, &outputL[0], destOutL, buffer.getNumSamples());
		outputInterpolatorR.process(ratio, &outputR[0], destOutR, buffer.getNumSamples());
		auto diff = numSamples - res;
		if (res != numSamples) {
			//MLOG("WARNING, interpolator used " + std::to_string(res) + " input samples, but " + std::to_string(numSamples) + " were supplied!");
			int counter = numSamples - diff;
			for (int i = 0; i < diff; i++) {
				ipBufferOutL.push_back(outputL[counter]);
				ipBufferOutR.push_back(outputR[counter++]);
				ipBufferInL.push_back(outputL[counter]);
				ipBufferInR.push_back(outputR[counter++]);
			}
		}
		else {
			//MLOG("Interpolator used as many input samples as were supplied.");
		}
	}
	else {
		float** channelDataOut = buffer.getArrayOfWritePointers();
		const float** channelDataIn = buffer.getArrayOfReadPointers();
		std::vector<float*> inVec{ &channelDataIn[0], &channelDataIn[1] };
		server->work(&inVec[0], channelDataOut, buffer.getNumSamples(), totalNumInputChannels, totalNumOutputChannels);
	}
}

//==============================================================================
bool VmpcAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* VmpcAudioProcessor::createEditor()
{
    return new VmpcAudioProcessorEditor (*this);
}

//==============================================================================
void VmpcAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void VmpcAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new VmpcAudioProcessor();
}
